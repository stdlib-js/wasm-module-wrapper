{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this, no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isArrayBuffer = require( '@stdlib/assert-is-arraybuffer' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar hasWebAssemblySupport = require( '@stdlib/assert-has-wasm-support' );\nvar objectAssign = require( '@stdlib/object-assign' );\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar DataView = require( '@stdlib/array-dataview' );\nvar bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\nvar ceil = require( '@stdlib/math-base-special-ceil' );\nvar writeDataView = require( '@stdlib/strided-base-write-dataview' ).ndarray;\nvar readDataView = require( '@stdlib/strided-base-read-dataview' ).ndarray;\nvar dtype = require( '@stdlib/array-dtype' );\nvar dtype2wasm = require( '@stdlib/wasm-base-dtype2wasm' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar HAS_WASM_SUPPORT = hasWebAssemblySupport();\nvar PAGE_SIZE = 64 * 1024; // 64KiB = size of 1 page   // TODO: consider moving to `@stdlib/constants/wasm/page-size`\n\n\n// MAIN //\n\n/**\n* WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {(Uint8Array|ArrayBuffer)} binary - WebAssembly binary code\n* @param {(Object|null)} memory - WebAssembly memory instance\n* @param {Object} [imports] - WebAssembly module import object\n* @throws {Error} environment does not support WebAssembly\n* @returns {WasmModule} wrapper instance\n*/\nfunction WasmModule( binary, memory, imports ) {\n\tif ( !( this instanceof WasmModule ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new WasmModule( binary, memory, imports );\n\t\t}\n\t\treturn new WasmModule( binary, memory, {} );\n\t}\n\tif ( !HAS_WASM_SUPPORT ) {\n\t\tthrow new Error( 'unexpected error. Environment does not support WebAssembly.' );\n\t}\n\tif ( isArrayBuffer( binary ) ) {\n\t\tbinary = new Uint8Array( binary );\n\t}\n\tthis._binary = binary;\n\tthis._module = null;\n\tthis._instance = null;\n\tthis._imports = imports;\n\n\tif ( memory ) {\n\t\tthis._memory = memory;\n\t\tthis._view = new DataView( memory.buffer );\n\t\tthis._buffer = new Uint8Array( memory.buffer );\n\t} else {\n\t\tthis._memory = null;\n\t\tthis._view = null;\n\t\tthis._buffer = null;\n\t}\n\n\treturn this;\n}\n\n/**\n* Returns WebAssembly binary code.\n*\n* @name binary\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Uint8Array}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'binary', function get() {\n\treturn this._binary.slice();\n});\n\n/**\n* Returns WebAssembly memory.\n*\n* @name memory\n* @memberof WasmModule.prototype\n* @readonly\n* @type {(Object|null)}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'memory', function get() {\n\treturn this._memory;\n});\n\n/**\n* Returns a WebAssembly memory buffer as a `Uint8Array`.\n*\n* @name buffer\n* @memberof WasmModule.prototype\n* @readonly\n* @type {(Uint8Array|null)}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'buffer', function get() {\n\treturn this._buffer;\n});\n\n/**\n* Returns a WebAssembly memory buffer as a `DataView`.\n*\n* @name view\n* @memberof WasmModule.prototype\n* @readonly\n* @type {(DataView|null)}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'view', function get() {\n\treturn this._view;\n});\n\n/**\n* Returns \"raw\" WebAssembly module exports.\n*\n* @name exports\n* @memberof WasmModule.prototype\n* @readonly\n* @type {(Object|null)}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'exports', function get() {\n\tif ( !this._instance ) {\n\t\treturn null;\n\t}\n\treturn objectAssign( {}, this._instance.exports );\n});\n\n/**\n* Asynchronously initializes a WebAssembly module instance.\n*\n* @name initialize\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @returns {Promise} promise which resolves upon initializing a WebAssembly module instance\n*/\nsetReadOnly( WasmModule.prototype, 'initialize', function initialize() {\n\tvar self;\n\tvar fcn;\n\n\tself = this;\n\tif ( this._instance ) {\n\t\tfcn = returnInstance;\n\t} else {\n\t\tfcn = instantiate;\n\t}\n\t// FIXME: replace with `@stdlib/promise/ctor`\n\treturn new Promise( fcn ); // eslint-disable-line stdlib/require-globals\n\n\t/**\n\t* Returns a WebAssembly instance.\n\t*\n\t* @private\n\t* @param {Function} resolve - callback to invoke upon fulfilling a promise\n\t* @param {Function} reject - callback to invoke upon rejecting a promise\n\t* @returns {void}\n\t*/\n\tfunction returnInstance( resolve ) {\n\t\tresolve( self );\n\t}\n\n\t/**\n\t* Instantiates a WebAssembly instance.\n\t*\n\t* @private\n\t* @param {Function} resolve - callback to invoke upon fulfilling a promise\n\t* @param {Function} reject - callback to invoke upon rejecting a promise\n\t* @returns {void}\n\t*/\n\tfunction instantiate( resolve, reject ) {\n\t\tvar p = WebAssembly.instantiate( self._binary, self._imports ); // TODO: replace with `@stdlib/wasm/instantiate`\n\t\tp.then( onResolve, onReject );\n\n\t\t/**\n\t\t* Callback invoked upon fulfilling a promise.\n\t\t*\n\t\t* @private\n\t\t* @param {Object} module - WebAssembly module\n\t\t* @param {Object} instance - WebAssembly instance\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onResolve( module, instance ) {\n\t\t\tself._module = module;\n\t\t\tself._instance = instance;\n\t\t\tresolve( self );\n\t\t}\n\n\t\t/**\n\t\t* Callback invoked upon rejecting a promise.\n\t\t*\n\t\t* @private\n\t\t* @param {*} reason - reason for rejecting a promise\n\t\t*/\n\t\tfunction onReject( reason ) {\n\t\t\treject( reason );\n\t\t}\n\t}\n});\n\n/**\n* Asynchronously initializes a WebAssembly module instance.\n*\n* @name initializeAsync\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {Callback} clbk - callback to invoke upon initializing a WebAssembly module instance\n* @throws {TypeError} must provide a callback function\n* @returns {void}\n*/\nsetReadOnly( WasmModule.prototype, 'initializeAsync', function initializeAsync( clbk ) {\n\tvar self;\n\tvar p;\n\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', clbk ) );\n\t}\n\tif ( this._instance ) {\n\t\treturn clbk( null, this );\n\t}\n\tself = this;\n\tp = WebAssembly.instantiate( this._binary, this._imports ); // TODO: replace with `@stdlib/wasm/instantiate`\n\tp.then( onResolve, onReject );\n\n\t/**\n\t* Callback invoked upon fulfilling a promise.\n\t*\n\t* @private\n\t* @param {Object} module - WebAssembly module\n\t* @param {Object} instance - WebAssembly instance\n\t* @returns {void}\n\t*/\n\tfunction onResolve( module, instance ) {\n\t\tself._module = module;\n\t\tself._instance = instance;\n\t\tclbk( null, self );\n\t}\n\n\t/**\n\t* Callback invoked upon rejecting a promise.\n\t*\n\t* @private\n\t* @param {*} reason - reason for rejecting a promise\n\t*/\n\tfunction onReject( reason ) {\n\t\tclbk( reason );\n\t}\n});\n\n/**\n* Synchronously initializes a WebAssembly module instance.\n*\n* ## Notes\n*\n* -   In web browsers, JavaScript engines may raise an exception when attempting to synchronously compile large WebAssembly binaries due to concerns about blocking the main thread. Hence, for large binaries (e.g., >4KiB), consider using asynchronous initialization methods.\n*\n* @name initializeSync\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @returns {WasmModule} wrapper instance\n*/\nsetReadOnly( WasmModule.prototype, 'initializeSync', function initializeSync() {\n\tif ( this._instance ) {\n\t\treturn this;\n\t}\n\tthis._module = new WebAssembly.Module( this._binary ); // TODO: replace with `@stdlib/wasm/module`\n\tthis._instance = new WebAssembly.Instance( this._module, this._imports ); // TODO: replace with `@stdlib/wasm/instantiate`\n\treturn this;\n});\n\n/**\n* Reallocates the underlying WebAssembly memory instance to a specified number of bytes.\n*\n* ## Notes\n*\n* -   WebAssembly memory can only **grow**, not shrink. Hence, if provided a number of bytes which is less than or equal to the size of the current memory, the function does nothing.\n* -   When non-shared memory is resized, the underlying the `ArrayBuffer` is detached, consequently invalidating any associated typed array views. Before resizing non-shared memory, ensure that associated typed array views no longer need byte access and can be garbage collected.\n*\n* @name realloc\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {NonNegativeInteger} nbytes - memory size (in bytes)\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {boolean} boolean indicating whether the resize operation was successful\n*/\nsetReadOnly( WasmModule.prototype, 'realloc', function realloc( nbytes ) {\n\tvar size;\n\tif ( !isNonNegativeInteger( nbytes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', nbytes ) );\n\t}\n\tif ( this._memory === null ) {\n\t\treturn false;\n\t}\n\tsize = ceil( ( nbytes-this._buffer.length ) / PAGE_SIZE );\n\tif ( size > 0 ) {\n\t\ttry {\n\t\t\tthis._memory.grow( size );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\treturn false;\n\t\t}\n\t\tthis._view = new DataView( this._memory.buffer );\n\t\tthis._buffer = new Uint8Array( this._memory.buffer );\n\t\treturn true;\n\t}\n\treturn false;\n});\n\n/**\n* Returns a boolean indicating whether the underlying WebAssembly memory instance has the capacity to store a provided list of values starting from a specified byte offset.\n*\n* @name hasCapacity\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {NonNegativeInteger} byteOffset - byte offset at which to start writing values\n* @param {Collection} values - input array containing values to write\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a collection\n* @returns {boolean} boolean indicating whether the underlying WebAssembly memory instance has enough capacity\n*/\nsetReadOnly( WasmModule.prototype, 'hasCapacity', function hasCapacity( byteOffset, values ) {\n\tvar nb;\n\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t}\n\tif ( !isCollection( values ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', values ) );\n\t}\n\tif ( this._memory === null ) {\n\t\treturn false;\n\t}\n\tnb = bytesPerElement( dtype2wasm( dtype( values ) || 'generic' ) );\n\tif ( (values.length*nb)+byteOffset > this._buffer.length ) {\n\t\treturn false;\n\t}\n\treturn true;\n});\n\n/**\n* Returns a boolean indicating whether a provided list of values is a view of the underlying memory of the WebAssembly module.\n*\n* @name isView\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {Collection} values - input array\n* @throws {TypeError} must provide a collection\n* @returns {boolean} boolean indicating whether the list is a memory view\n*/\nsetReadOnly( WasmModule.prototype, 'isView', function isView( values ) {\n\tif ( !isCollection( values ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array-like object. Value: `%s`.', values ) );\n\t}\n\tif ( this._memory && values.buffer ) {\n\t\treturn ( values.buffer === this._memory.buffer );\n\t}\n\treturn false;\n});\n\n/**\n* Writes values to the underlying WebAssembly memory instance.\n*\n* ## Notes\n*\n* -   The function infers element size (i.e., number of bytes per element) from the data type of the input array. For example, if provided a `Float32Array`, the function writes each element as a single-precision floating-point number to the underlying WebAssembly memory instance.\n* -   In order to write elements as a different data type, you need to perform an explicit cast **before** calling this method. For example, in order to write single-precision floating-point numbers contained in a `Float32Array` as signed 32-bit integers, you must first convert the `Float32Array` to an `Int32Array` before passing the values to this method.\n* -   If provided an array having an unknown or \"generic\" data type, elements are written as double-precision floating-point numbers.\n*\n* @name write\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {NonNegativeInteger} byteOffset - byte offset at which to start writing values\n* @param {Collection} values - input array containing values to write\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a collection\n* @throws {Error} unable to perform write operation as the module is not bound to a memory instance\n* @throws {RangeError} insufficient memory\n* @returns {WasmModule} wrapper instance\n*/\nsetReadOnly( WasmModule.prototype, 'write', function write( byteOffset, values ) {\n\tvar nb;\n\tif ( this._memory === null ) {\n\t\tthrow new Error( 'invalid invocation. Unable to perform write operation, as the WebAssembly module is not bound to an underlying WebAssembly memory instance.' );\n\t}\n\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t}\n\tif ( !isCollection( values ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', values ) );\n\t}\n\tnb = bytesPerElement( dtype2wasm( dtype( values ) || 'generic' ) );\n\tif ( (values.length*nb)+byteOffset > this._buffer.length ) {\n\t\tthrow new RangeError( 'invalid argument. Second argument is incompatible with the specified byte offset and available memory. Resize the underlying memory instance in order to accommodate the list of provided values.' );\n\t}\n\twriteDataView( values.length, values, 1, 0, this._view, nb, byteOffset, true ); // eslint-disable-line max-len\n\treturn this;\n});\n\n/**\n* Reads values from the underlying WebAssembly memory instance.\n*\n* ## Notes\n*\n* -   The function infers element size (i.e., number of bytes per element) from the data type of the output array. For example, if provided a `Float32Array`, the function reads each element as a single-precision floating-point number from the underlying WebAssembly memory instance.\n* -   In order to read elements as a different data type, you need to perform an explicit cast **after** calling this method. For example, in order to read single-precision floating-point numbers contained in a `Float32Array` as signed 32-bit integers, you must convert the `Float32Array` to an `Int32Array` after reading memory values using this method.\n* -   If provided an output array having an unknown or \"generic\" data type, elements are read as double-precision floating-point numbers.\n*\n* @name read\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {NonNegativeInteger} byteOffset - byte offset at which to start reading values\n* @param {Collection} out - output array for storing read values\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a collection\n* @throws {Error} unable to perform read operation as the module is not bound to a memory instance\n* @throws {RangeError} output array exceeds module memory\n* @returns {WasmModule} wrapper instance\n*/\nsetReadOnly( WasmModule.prototype, 'read', function write( byteOffset, out ) {\n\tvar nb;\n\tif ( this._memory === null ) {\n\t\tthrow new Error( 'invalid invocation. Unable to perform read operation, as the WebAssembly module is not bound to an underlying WebAssembly memory instance.' );\n\t}\n\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t}\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\tnb = bytesPerElement( dtype2wasm( dtype( out ) || 'generic' ) );\n\tif ( (out.length*nb)+byteOffset > this._buffer.length ) {\n\t\tthrow new RangeError( 'invalid argument. Second argument is incompatible with the specified byte offset and available memory. Not enough values to fill the provided output array.' );\n\t}\n\treadDataView( out.length, this._view, nb, byteOffset, out, 1, 0, true );\n\treturn this;\n});\n\n\n// EXPORTS //\n\nmodule.exports = WasmModule;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly module wrapper.\n*\n* @module @stdlib/wasm-module-wrapper\n*\n* @example\n* var Module = require( '@stdlib/wasm-module-wrapper' );\n*\n* // TODO\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAwBA,IAAIC,EAAuB,QAAS,uCAAwC,EAAE,YAC1EC,EAAe,QAAS,8BAA+B,EACvDC,EAAgB,QAAS,+BAAgC,EACzDC,EAAa,QAAS,4BAA6B,EACnDC,EAAc,QAAS,uDAAwD,EAC/EC,EAAsB,QAAS,uDAAwD,EACvFC,EAAwB,QAAS,iCAAkC,EACnEC,EAAe,QAAS,uBAAwB,EAChDC,EAAa,QAAS,qBAAsB,EAC5CC,EAAW,QAAS,wBAAyB,EAC7CC,EAAkB,QAAS,wCAAyC,EACpEC,EAAO,QAAS,gCAAiC,EACjDC,EAAgB,QAAS,qCAAsC,EAAE,QACjEC,EAAe,QAAS,oCAAqC,EAAE,QAC/DC,EAAQ,QAAS,qBAAsB,EACvCC,EAAa,QAAS,8BAA+B,EACrDC,EAAS,QAAS,uBAAwB,EAK1CC,EAAmBX,EAAsB,EACzCY,EAAY,GAAK,KAerB,SAASC,EAAYC,EAAQC,EAAQC,EAAU,CAC9C,GAAK,EAAG,gBAAgBH,GACvB,OAAK,UAAU,OAAS,EAChB,IAAIA,EAAYC,EAAQC,EAAQC,CAAQ,EAEzC,IAAIH,EAAYC,EAAQC,EAAQ,CAAC,CAAE,EAE3C,GAAK,CAACJ,EACL,MAAM,IAAI,MAAO,6DAA8D,EAEhF,OAAKf,EAAekB,CAAO,IAC1BA,EAAS,IAAIZ,EAAYY,CAAO,GAEjC,KAAK,QAAUA,EACf,KAAK,QAAU,KACf,KAAK,UAAY,KACjB,KAAK,SAAWE,EAEXD,GACJ,KAAK,QAAUA,EACf,KAAK,MAAQ,IAAIZ,EAAUY,EAAO,MAAO,EACzC,KAAK,QAAU,IAAIb,EAAYa,EAAO,MAAO,IAE7C,KAAK,QAAU,KACf,KAAK,MAAQ,KACb,KAAK,QAAU,MAGT,IACR,CAUAhB,EAAqBc,EAAW,UAAW,SAAU,UAAe,CACnE,OAAO,KAAK,QAAQ,MAAM,CAC3B,CAAC,EAUDd,EAAqBc,EAAW,UAAW,SAAU,UAAe,CACnE,OAAO,KAAK,OACb,CAAC,EAUDd,EAAqBc,EAAW,UAAW,SAAU,UAAe,CACnE,OAAO,KAAK,OACb,CAAC,EAUDd,EAAqBc,EAAW,UAAW,OAAQ,UAAe,CACjE,OAAO,KAAK,KACb,CAAC,EAUDd,EAAqBc,EAAW,UAAW,UAAW,UAAe,CACpE,OAAM,KAAK,UAGJZ,EAAc,CAAC,EAAG,KAAK,UAAU,OAAQ,EAFxC,IAGT,CAAC,EAWDH,EAAae,EAAW,UAAW,aAAc,UAAsB,CACtE,IAAII,EACAC,EAEJ,OAAAD,EAAO,KACF,KAAK,UACTC,EAAMC,EAEND,EAAME,EAGA,IAAI,QAASF,CAAI,EAUxB,SAASC,EAAgBE,EAAU,CAClCA,EAASJ,CAAK,CACf,CAUA,SAASG,EAAaC,EAASC,EAAS,CACvC,IAAIC,EAAI,YAAY,YAAaN,EAAK,QAASA,EAAK,QAAS,EAC7DM,EAAE,KAAMC,EAAWC,CAAS,EAU5B,SAASD,EAAW/B,EAAQiC,EAAW,CACtCT,EAAK,QAAUxB,EACfwB,EAAK,UAAYS,EACjBL,EAASJ,CAAK,CACf,CAQA,SAASQ,EAAUE,EAAS,CAC3BL,EAAQK,CAAO,CAChB,CACD,CACD,CAAC,EAaD7B,EAAae,EAAW,UAAW,kBAAmB,SAA0Be,EAAO,CACtF,IAAIX,EACAM,EAEJ,GAAK,CAAC1B,EAAY+B,CAAK,EACtB,MAAM,IAAI,UAAWlB,EAAQ,0DAA2DkB,CAAK,CAAE,EAEhG,GAAK,KAAK,UACT,OAAOA,EAAM,KAAM,IAAK,EAEzBX,EAAO,KACPM,EAAI,YAAY,YAAa,KAAK,QAAS,KAAK,QAAS,EACzDA,EAAE,KAAMC,EAAWC,CAAS,EAU5B,SAASD,EAAW/B,EAAQiC,EAAW,CACtCT,EAAK,QAAUxB,EACfwB,EAAK,UAAYS,EACjBE,EAAM,KAAMX,CAAK,CAClB,CAQA,SAASQ,EAAUE,EAAS,CAC3BC,EAAMD,CAAO,CACd,CACD,CAAC,EAeD7B,EAAae,EAAW,UAAW,iBAAkB,UAA0B,CAC9E,OAAK,KAAK,UACF,MAER,KAAK,QAAU,IAAI,YAAY,OAAQ,KAAK,OAAQ,EACpD,KAAK,UAAY,IAAI,YAAY,SAAU,KAAK,QAAS,KAAK,QAAS,EAChE,KACR,CAAC,EAkBDf,EAAae,EAAW,UAAW,UAAW,SAAkBgB,EAAS,CACxE,IAAIC,EACJ,GAAK,CAACpC,EAAsBmC,CAAO,EAClC,MAAM,IAAI,UAAWnB,EAAQ,qEAAsEmB,CAAO,CAAE,EAE7G,GAAK,KAAK,UAAY,KACrB,MAAO,GAGR,GADAC,EAAOzB,GAAQwB,EAAO,KAAK,QAAQ,QAAWjB,CAAU,EACnDkB,EAAO,EAAI,CACf,GAAI,CACH,KAAK,QAAQ,KAAMA,CAAK,CACzB,OAAUC,EAAM,CACf,MAAO,EACR,CACA,YAAK,MAAQ,IAAI5B,EAAU,KAAK,QAAQ,MAAO,EAC/C,KAAK,QAAU,IAAID,EAAY,KAAK,QAAQ,MAAO,EAC5C,EACR,CACA,MAAO,EACR,CAAC,EAeDJ,EAAae,EAAW,UAAW,cAAe,SAAsBmB,EAAYC,EAAS,CAC5F,IAAIC,EACJ,GAAK,CAACxC,EAAsBsC,CAAW,EACtC,MAAM,IAAI,UAAWtB,EAAQ,+EAAgFsB,CAAW,CAAE,EAE3H,GAAK,CAACrC,EAAcsC,CAAO,EAC1B,MAAM,IAAI,UAAWvB,EAAQ,+EAAgFuB,CAAO,CAAE,EAMvH,MAJK,OAAK,UAAY,OAGtBC,EAAK9B,EAAiBK,EAAYD,EAAOyB,CAAO,GAAK,SAAU,CAAE,EAC3DA,EAAO,OAAOC,EAAIF,EAAa,KAAK,QAAQ,QAInD,CAAC,EAaDlC,EAAae,EAAW,UAAW,SAAU,SAAiBoB,EAAS,CACtE,GAAK,CAACtC,EAAcsC,CAAO,EAC1B,MAAM,IAAI,UAAWvB,EAAQ,oEAAqEuB,CAAO,CAAE,EAE5G,OAAK,KAAK,SAAWA,EAAO,OAClBA,EAAO,SAAW,KAAK,QAAQ,OAElC,EACR,CAAC,EAuBDnC,EAAae,EAAW,UAAW,QAAS,SAAgBmB,EAAYC,EAAS,CAChF,IAAIC,EACJ,GAAK,KAAK,UAAY,KACrB,MAAM,IAAI,MAAO,6IAA8I,EAEhK,GAAK,CAACxC,EAAsBsC,CAAW,EACtC,MAAM,IAAI,UAAWtB,EAAQ,+EAAgFsB,CAAW,CAAE,EAE3H,GAAK,CAACrC,EAAcsC,CAAO,EAC1B,MAAM,IAAI,UAAWvB,EAAQ,+EAAgFuB,CAAO,CAAE,EAGvH,GADAC,EAAK9B,EAAiBK,EAAYD,EAAOyB,CAAO,GAAK,SAAU,CAAE,EAC3DA,EAAO,OAAOC,EAAIF,EAAa,KAAK,QAAQ,OACjD,MAAM,IAAI,WAAY,mMAAoM,EAE3N,OAAA1B,EAAe2B,EAAO,OAAQA,EAAQ,EAAG,EAAG,KAAK,MAAOC,EAAIF,EAAY,EAAK,EACtE,IACR,CAAC,EAuBDlC,EAAae,EAAW,UAAW,OAAQ,SAAgBmB,EAAYG,EAAM,CAC5E,IAAID,EACJ,GAAK,KAAK,UAAY,KACrB,MAAM,IAAI,MAAO,4IAA6I,EAE/J,GAAK,CAACxC,EAAsBsC,CAAW,EACtC,MAAM,IAAI,UAAWtB,EAAQ,+EAAgFsB,CAAW,CAAE,EAE3H,GAAK,CAACrC,EAAcwC,CAAI,EACvB,MAAM,IAAI,UAAWzB,EAAQ,+EAAgFyB,CAAI,CAAE,EAGpH,GADAD,EAAK9B,EAAiBK,EAAYD,EAAO2B,CAAI,GAAK,SAAU,CAAE,EACxDA,EAAI,OAAOD,EAAIF,EAAa,KAAK,QAAQ,OAC9C,MAAM,IAAI,WAAY,6JAA8J,EAErL,OAAAzB,EAAc4B,EAAI,OAAQ,KAAK,MAAOD,EAAIF,EAAYG,EAAK,EAAG,EAAG,EAAK,EAC/D,IACR,CAAC,EAKD1C,EAAO,QAAUoB,ICvbjB,IAAIuB,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isCollection", "isArrayBuffer", "isFunction", "setReadOnly", "setReadOnlyAccessor", "hasWebAssemblySupport", "objectAssign", "Uint8Array", "DataView", "bytesPerElement", "ceil", "writeDataView", "readDataView", "dtype", "dtype2wasm", "format", "HAS_WASM_SUPPORT", "PAGE_SIZE", "WasmModule", "binary", "memory", "imports", "self", "fcn", "returnInstance", "instantiate", "resolve", "reject", "p", "onResolve", "onReject", "instance", "reason", "clbk", "nbytes", "size", "err", "byteOffset", "values", "nb", "out", "main"]
}
